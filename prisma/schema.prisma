// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Charge {
  name         String  @unique @id
  id Int @default(autoincrement())
  views Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description  String?
  companyName  String?
  website      String?
  contactWeb   String?
  contactPhone String?

  comments       Comment[]

  @@index([views])
}

model Comment {
  id        String   @id @default(uuid())
  email String
  displayName String

  content String
  commentType String

  likes Int @default(0)
  dislikes Int @default(0)

 // subset of a charge
  chargeName String
  charge   Charge @relation(fields: [chargeName], references: [name])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)
}


// AUTH RELATED - FOR POSSIBLE CMS IN THE FUTURE

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}